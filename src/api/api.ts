/* tslint:disable */
/* eslint-disable */
/**
 * eShop API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddUpdateCartItemDto
 */
export interface AddUpdateCartItemDto {
    /**
     * 
     * @type {number}
     * @memberof AddUpdateCartItemDto
     */
    'itemId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddUpdateCartItemDto
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface AuthRequestDto
 */
export interface AuthRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AuthRequestDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthRequestDto
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface CategoryResponseDto
 */
export interface CategoryResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryResponseDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateItemImageDto
 */
export interface CreateItemImageDto {
    /**
     * 
     * @type {string}
     * @memberof CreateItemImageDto
     */
    'base64Data': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateItemImageDto
     */
    'isThumbnail'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateItemImageDto
     */
    'displayOrder'?: number;
}
/**
 * 
 * @export
 * @interface CreateItemWithPricesDto
 */
export interface CreateItemWithPricesDto {
    /**
     * 
     * @type {string}
     * @memberof CreateItemWithPricesDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemWithPricesDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateItemWithPricesDto
     */
    'taxationId'?: number | null;
    /**
     * 
     * @type {Array<CreatePriceItemDto>}
     * @memberof CreateItemWithPricesDto
     */
    'priceItems'?: Array<CreatePriceItemDto> | null;
    /**
     * 
     * @type {Array<CreateItemImageDto>}
     * @memberof CreateItemWithPricesDto
     */
    'images'?: Array<CreateItemImageDto> | null;
}
/**
 * 
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'userId'?: number | null;
    /**
     * 
     * @type {Array<CreateOrderItemDto>}
     * @memberof CreateOrderDto
     */
    'orderItems'?: Array<CreateOrderItemDto> | null;
}
/**
 * 
 * @export
 * @interface CreateOrderItemDto
 */
export interface CreateOrderItemDto {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderItemDto
     */
    'itemId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderItemDto
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface CreatePriceItemDto
 */
export interface CreatePriceItemDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePriceItemDto
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePriceItemDto
     */
    'isSale'?: boolean;
}
/**
 * 
 * @export
 * @interface ItemCategoryDto
 */
export interface ItemCategoryDto {
    /**
     * 
     * @type {number}
     * @memberof ItemCategoryDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemCategoryDto
     */
    'categoryId'?: number;
}
/**
 * 
 * @export
 * @interface ItemImageDto
 */
export interface ItemImageDto {
    /**
     * 
     * @type {number}
     * @memberof ItemImageDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemImageDto
     */
    'base64Data'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ItemImageDto
     */
    'isThumbnail'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ItemImageDto
     */
    'displayOrder'?: number;
}
/**
 * 
 * @export
 * @interface ItemResponseDto
 */
export interface ItemResponseDto {
    /**
     * 
     * @type {number}
     * @memberof ItemResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemResponseDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ItemResponseDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ItemResponseDto
     */
    'taxationId'?: number;
    /**
     * 
     * @type {TaxationResponseDto}
     * @memberof ItemResponseDto
     */
    'taxation'?: TaxationResponseDto;
    /**
     * 
     * @type {string}
     * @memberof ItemResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<PriceItemDto>}
     * @memberof ItemResponseDto
     */
    'priceItems'?: Array<PriceItemDto> | null;
    /**
     * 
     * @type {Array<ItemCategoryDto>}
     * @memberof ItemResponseDto
     */
    'itemCategories'?: Array<ItemCategoryDto> | null;
    /**
     * 
     * @type {Array<ItemImageDto>}
     * @memberof ItemResponseDto
     */
    'itemImages'?: Array<ItemImageDto> | null;
}
/**
 * 
 * @export
 * @interface OrderItemDto
 */
export interface OrderItemDto {
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'itemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'itemName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'priceAtPurchase'?: number;
}
/**
 * 
 * @export
 * @interface OrderResponseDto
 */
export interface OrderResponseDto {
    /**
     * 
     * @type {number}
     * @memberof OrderResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponseDto
     */
    'userId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderResponseDto
     */
    'orderDate'?: string;
    /**
     * 
     * @type {Array<OrderItemDto>}
     * @memberof OrderResponseDto
     */
    'orderItems'?: Array<OrderItemDto> | null;
    /**
     * 
     * @type {number}
     * @memberof OrderResponseDto
     */
    'totalAmount'?: number;
}
/**
 * 
 * @export
 * @interface PriceItemDto
 */
export interface PriceItemDto {
    /**
     * 
     * @type {number}
     * @memberof PriceItemDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PriceItemDto
     */
    'price'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PriceItemDto
     */
    'isSale'?: boolean;
}
/**
 * 
 * @export
 * @interface ShippingRequestDto
 */
export interface ShippingRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ShippingRequestDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingRequestDto
     */
    'cost'?: number;
}
/**
 * 
 * @export
 * @interface ShippingResponseDto
 */
export interface ShippingResponseDto {
    /**
     * 
     * @type {number}
     * @memberof ShippingResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingResponseDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingResponseDto
     */
    'cost'?: number;
}
/**
 * 
 * @export
 * @interface ShoppingCartDto
 */
export interface ShoppingCartDto {
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartDto
     */
    'userId'?: number | null;
    /**
     * 
     * @type {Array<ShoppingCartItemDto>}
     * @memberof ShoppingCartDto
     */
    'items'?: Array<ShoppingCartItemDto> | null;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartDto
     */
    'totalPrice'?: number;
}
/**
 * 
 * @export
 * @interface ShoppingCartItemDto
 */
export interface ShoppingCartItemDto {
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartItemDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartItemDto
     */
    'itemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShoppingCartItemDto
     */
    'itemName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartItemDto
     */
    'itemPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartItemDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartItemDto
     */
    'totalPrice'?: number;
}
/**
 * 
 * @export
 * @interface ShoppingCartSummaryDto
 */
export interface ShoppingCartSummaryDto {
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartSummaryDto
     */
    'cartId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartSummaryDto
     */
    'totalItemTypes'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartSummaryDto
     */
    'totalQuantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartSummaryDto
     */
    'totalPrice'?: number;
}
/**
 * 
 * @export
 * @interface TaxationRequestDto
 */
export interface TaxationRequestDto {
    /**
     * 
     * @type {string}
     * @memberof TaxationRequestDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxationRequestDto
     */
    'rate'?: number;
}
/**
 * 
 * @export
 * @interface TaxationResponseDto
 */
export interface TaxationResponseDto {
    /**
     * 
     * @type {number}
     * @memberof TaxationResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxationResponseDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxationResponseDto
     */
    'rate'?: number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (authRequestDto?: AuthRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (authRequestDto?: AuthRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(authRequestDto?: AuthRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(authRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(authRequestDto?: AuthRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(authRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(authRequestDto?: AuthRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLoginPost(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(authRequestDto?: AuthRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthRegisterPost(authRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(authRequestDto?: AuthRequestDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(authRequestDto?: AuthRequestDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [itemId] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesAssignPost: async (itemId?: number, categoryId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Categories/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryDetailIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCategoriesCategoryDetailIdGet', 'id', id)
            const localVarPath = `/api/Categories/CategoryDetail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCategoryDto} [createCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesPost: async (createCategoryDto?: CreateCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [itemId] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesAssignPost(itemId?: number, categoryId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesAssignPost(itemId, categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.apiCategoriesAssignPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesCategoryDetailIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesCategoryDetailIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.apiCategoriesCategoryDetailIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.apiCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCategoryDto} [createCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoriesPost(createCategoryDto?: CreateCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoriesPost(createCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.apiCategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [itemId] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesAssignPost(itemId?: number, categoryId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCategoriesAssignPost(itemId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesCategoryDetailIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryResponseDto>> {
            return localVarFp.apiCategoriesCategoryDetailIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryResponseDto>> {
            return localVarFp.apiCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCategoryDto} [createCategoryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoriesPost(createCategoryDto?: CreateCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponseDto> {
            return localVarFp.apiCategoriesPost(createCategoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * 
     * @param {number} [itemId] 
     * @param {number} [categoryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public apiCategoriesAssignPost(itemId?: number, categoryId?: number, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).apiCategoriesAssignPost(itemId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public apiCategoriesCategoryDetailIdGet(id: number, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).apiCategoriesCategoryDetailIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public apiCategoriesGet(options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).apiCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCategoryDto} [createCategoryDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public apiCategoriesPost(createCategoryDto?: CreateCategoryDto, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).apiCategoriesPost(createCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateItemWithPricesDto} [createItemWithPricesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsCreateWithPricesPost: async (createItemWithPricesDto?: CreateItemWithPricesDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Items/create-with-prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createItemWithPricesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiItemsIdGet', 'id', id)
            const localVarPath = `/api/Items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CreatePriceItemDto} [createPriceItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsIdPricePost: async (id: number, createPriceItemDto?: CreatePriceItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiItemsIdPricePost', 'id', id)
            const localVarPath = `/api/Items/{id}/price`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPriceItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateItemWithPricesDto} [createItemWithPricesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemsCreateWithPricesPost(createItemWithPricesDto?: CreateItemWithPricesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemsCreateWithPricesPost(createItemWithPricesDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.apiItemsCreateWithPricesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.apiItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.apiItemsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CreatePriceItemDto} [createPriceItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemsIdPricePost(id: number, createPriceItemDto?: CreatePriceItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemsIdPricePost(id, createPriceItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.apiItemsIdPricePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateItemWithPricesDto} [createItemWithPricesDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsCreateWithPricesPost(createItemWithPricesDto?: CreateItemWithPricesDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiItemsCreateWithPricesPost(createItemWithPricesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ItemResponseDto>> {
            return localVarFp.apiItemsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ItemResponseDto> {
            return localVarFp.apiItemsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CreatePriceItemDto} [createPriceItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemsIdPricePost(id: number, createPriceItemDto?: CreatePriceItemDto, options?: RawAxiosRequestConfig): AxiosPromise<PriceItemDto> {
            return localVarFp.apiItemsIdPricePost(id, createPriceItemDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * 
     * @param {CreateItemWithPricesDto} [createItemWithPricesDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public apiItemsCreateWithPricesPost(createItemWithPricesDto?: CreateItemWithPricesDto, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).apiItemsCreateWithPricesPost(createItemWithPricesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public apiItemsGet(options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).apiItemsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public apiItemsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).apiItemsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CreatePriceItemDto} [createPriceItemDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public apiItemsIdPricePost(id: number, createPriceItemDto?: CreatePriceItemDto, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).apiItemsIdPricePost(id, createPriceItemDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiOrdersIdGet', 'id', id)
            const localVarPath = `/api/Orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrderDto} [createOrderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPost: async (createOrderDto?: CreateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.apiOrdersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrderDto} [createOrderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersPost(createOrderDto?: CreateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersPost(createOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.apiOrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseDto> {
            return localVarFp.apiOrdersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrderDto} [createOrderDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPost(createOrderDto?: CreateOrderDto, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseDto> {
            return localVarFp.apiOrdersPost(createOrderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiOrdersIdGet(id: number, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).apiOrdersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrderDto} [createOrderDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiOrdersPost(createOrderDto?: CreateOrderDto, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).apiOrdersPost(createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Shipping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiShippingIdDelete', 'id', id)
            const localVarPath = `/api/Shipping/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiShippingIdGet', 'id', id)
            const localVarPath = `/api/Shipping/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ShippingRequestDto} [shippingRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingIdPut: async (id: number, shippingRequestDto?: ShippingRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiShippingIdPut', 'id', id)
            const localVarPath = `/api/Shipping/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShippingRequestDto} [shippingRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingPost: async (shippingRequestDto?: ShippingRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Shipping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShippingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShippingResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShippingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.apiShippingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShippingIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShippingIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.apiShippingIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShippingIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShippingIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.apiShippingIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ShippingRequestDto} [shippingRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShippingIdPut(id: number, shippingRequestDto?: ShippingRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShippingIdPut(id, shippingRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.apiShippingIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ShippingRequestDto} [shippingRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShippingPost(shippingRequestDto?: ShippingRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShippingPost(shippingRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShippingApi.apiShippingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShippingResponseDto>> {
            return localVarFp.apiShippingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiShippingIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ShippingResponseDto> {
            return localVarFp.apiShippingIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ShippingRequestDto} [shippingRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingIdPut(id: number, shippingRequestDto?: ShippingRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiShippingIdPut(id, shippingRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShippingRequestDto} [shippingRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShippingPost(shippingRequestDto?: ShippingRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiShippingPost(shippingRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public apiShippingGet(options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).apiShippingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public apiShippingIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).apiShippingIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public apiShippingIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).apiShippingIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ShippingRequestDto} [shippingRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public apiShippingIdPut(id: number, shippingRequestDto?: ShippingRequestDto, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).apiShippingIdPut(id, shippingRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShippingRequestDto} [shippingRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public apiShippingPost(shippingRequestDto?: ShippingRequestDto, options?: RawAxiosRequestConfig) {
        return ShippingApiFp(this.configuration).apiShippingPost(shippingRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShoppingCartApi - axios parameter creator
 * @export
 */
export const ShoppingCartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartCartIdGet: async (cartId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('apiShoppingCartCartIdGet', 'cartId', cartId)
            const localVarPath = `/api/ShoppingCart/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} cartId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartCartIdItemItemIdDelete: async (cartId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('apiShoppingCartCartIdItemItemIdDelete', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiShoppingCartCartIdItemItemIdDelete', 'itemId', itemId)
            const localVarPath = `/api/ShoppingCart/{cartId}/item/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} cartId 
         * @param {AddUpdateCartItemDto} [addUpdateCartItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartCartIdItemPut: async (cartId: number, addUpdateCartItemDto?: AddUpdateCartItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('apiShoppingCartCartIdItemPut', 'cartId', cartId)
            const localVarPath = `/api/ShoppingCart/{cartId}/item`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUpdateCartItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartPost: async (userId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ShoppingCart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartSummaryCartIdGet: async (cartId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('apiShoppingCartSummaryCartIdGet', 'cartId', cartId)
            const localVarPath = `/api/ShoppingCart/summary/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingCartApi - functional programming interface
 * @export
 */
export const ShoppingCartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingCartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShoppingCartCartIdGet(cartId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShoppingCartCartIdGet(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.apiShoppingCartCartIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} cartId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShoppingCartCartIdItemItemIdDelete(cartId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShoppingCartCartIdItemItemIdDelete(cartId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.apiShoppingCartCartIdItemItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} cartId 
         * @param {AddUpdateCartItemDto} [addUpdateCartItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShoppingCartCartIdItemPut(cartId: number, addUpdateCartItemDto?: AddUpdateCartItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShoppingCartCartIdItemPut(cartId, addUpdateCartItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.apiShoppingCartCartIdItemPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShoppingCartPost(userId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShoppingCartPost(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.apiShoppingCartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShoppingCartSummaryCartIdGet(cartId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartSummaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShoppingCartSummaryCartIdGet(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingCartApi.apiShoppingCartSummaryCartIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShoppingCartApi - factory interface
 * @export
 */
export const ShoppingCartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingCartApiFp(configuration)
    return {
        /**
         * 
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartCartIdGet(cartId: number, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingCartDto> {
            return localVarFp.apiShoppingCartCartIdGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} cartId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartCartIdItemItemIdDelete(cartId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingCartDto> {
            return localVarFp.apiShoppingCartCartIdItemItemIdDelete(cartId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} cartId 
         * @param {AddUpdateCartItemDto} [addUpdateCartItemDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartCartIdItemPut(cartId: number, addUpdateCartItemDto?: AddUpdateCartItemDto, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingCartDto> {
            return localVarFp.apiShoppingCartCartIdItemPut(cartId, addUpdateCartItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartPost(userId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingCartDto> {
            return localVarFp.apiShoppingCartPost(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShoppingCartSummaryCartIdGet(cartId: number, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingCartSummaryDto> {
            return localVarFp.apiShoppingCartSummaryCartIdGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShoppingCartApi - object-oriented interface
 * @export
 * @class ShoppingCartApi
 * @extends {BaseAPI}
 */
export class ShoppingCartApi extends BaseAPI {
    /**
     * 
     * @param {number} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiShoppingCartCartIdGet(cartId: number, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).apiShoppingCartCartIdGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} cartId 
     * @param {number} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiShoppingCartCartIdItemItemIdDelete(cartId: number, itemId: number, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).apiShoppingCartCartIdItemItemIdDelete(cartId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} cartId 
     * @param {AddUpdateCartItemDto} [addUpdateCartItemDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiShoppingCartCartIdItemPut(cartId: number, addUpdateCartItemDto?: AddUpdateCartItemDto, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).apiShoppingCartCartIdItemPut(cartId, addUpdateCartItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiShoppingCartPost(userId?: number, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).apiShoppingCartPost(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiShoppingCartSummaryCartIdGet(cartId: number, options?: RawAxiosRequestConfig) {
        return ShoppingCartApiFp(this.configuration).apiShoppingCartSummaryCartIdGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaxationApi - axios parameter creator
 * @export
 */
export const TaxationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Taxation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaxationIdDelete', 'id', id)
            const localVarPath = `/api/Taxation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaxationIdGet', 'id', id)
            const localVarPath = `/api/Taxation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TaxationRequestDto} [taxationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationIdPut: async (id: number, taxationRequestDto?: TaxationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaxationIdPut', 'id', id)
            const localVarPath = `/api/Taxation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TaxationRequestDto} [taxationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationPost: async (taxationRequestDto?: TaxationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Taxation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxationApi - functional programming interface
 * @export
 */
export const TaxationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaxationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxationResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaxationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxationApi.apiTaxationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaxationIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaxationIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxationApi.apiTaxationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaxationIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaxationIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxationApi.apiTaxationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TaxationRequestDto} [taxationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaxationIdPut(id: number, taxationRequestDto?: TaxationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaxationIdPut(id, taxationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxationApi.apiTaxationIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TaxationRequestDto} [taxationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaxationPost(taxationRequestDto?: TaxationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaxationPost(taxationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxationApi.apiTaxationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaxationApi - factory interface
 * @export
 */
export const TaxationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TaxationResponseDto>> {
            return localVarFp.apiTaxationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTaxationIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<TaxationResponseDto> {
            return localVarFp.apiTaxationIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TaxationRequestDto} [taxationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationIdPut(id: number, taxationRequestDto?: TaxationRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTaxationIdPut(id, taxationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaxationRequestDto} [taxationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxationPost(taxationRequestDto?: TaxationRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTaxationPost(taxationRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxationApi - object-oriented interface
 * @export
 * @class TaxationApi
 * @extends {BaseAPI}
 */
export class TaxationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxationApi
     */
    public apiTaxationGet(options?: RawAxiosRequestConfig) {
        return TaxationApiFp(this.configuration).apiTaxationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxationApi
     */
    public apiTaxationIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return TaxationApiFp(this.configuration).apiTaxationIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxationApi
     */
    public apiTaxationIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TaxationApiFp(this.configuration).apiTaxationIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TaxationRequestDto} [taxationRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxationApi
     */
    public apiTaxationIdPut(id: number, taxationRequestDto?: TaxationRequestDto, options?: RawAxiosRequestConfig) {
        return TaxationApiFp(this.configuration).apiTaxationIdPut(id, taxationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaxationRequestDto} [taxationRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxationApi
     */
    public apiTaxationPost(taxationRequestDto?: TaxationRequestDto, options?: RawAxiosRequestConfig) {
        return TaxationApiFp(this.configuration).apiTaxationPost(taxationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersProfileGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersProfileGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersProfileGet(options).then((request) => request(this.axios, this.basePath));
    }
}



